// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eshop_Data.Contcrete.Context;

#nullable disable

namespace eshop_Data.Migrations
{
    [DbContext(typeof(EshopDbContext))]
    partial class EshopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "c0b7fef7-df2b-4857-9b3d-bc8967ad19ac",
                            RoleId = "115c7796-cfac-44de-91b5-916eaae125b5"
                        },
                        new
                        {
                            UserId = "14a0183f-1e96-4930-a83d-6ef5f22d8c09",
                            RoleId = "811f466c-9d06-43f8-a054-24aedbb4161b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("eshop_Entity.Contcrete.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "115c7796-cfac-44de-91b5-916eaae125b5",
                            Description = "Administrator role",
                            Name = "AdminUser",
                            NormalizedName = "ADMINUSER"
                        },
                        new
                        {
                            Id = "811f466c-9d06-43f8-a054-24aedbb4161b",
                            Description = "Regular user role",
                            Name = "NormalUser",
                            NormalizedName = "NORMALUSER"
                        });
                });

            modelBuilder.Entity("eshop_Entity.Contcrete.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c0b7fef7-df2b-4857-9b3d-bc8967ad19ac",
                            AccessFailedCount = 0,
                            Address = "",
                            City = "",
                            ConcurrencyStamp = "10ab6855-7563-409c-bca2-e685071734cd",
                            DateOfBirth = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7760),
                            Email = "adminuser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINUSER@GMAIL.COM",
                            NormalizedUserName = "ADMINUSER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGwHs0fGFaegSPAyiHvitSPZooXHjxEuct/odpfGBkdeA6aBmn3/FN42FuGnmUURgQ==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a2467d7e-2b72-43ec-bd02-cbafc24f7a63",
                            TwoFactorEnabled = false,
                            UserName = "adminuser@gmail.com"
                        },
                        new
                        {
                            Id = "14a0183f-1e96-4930-a83d-6ef5f22d8c09",
                            AccessFailedCount = 0,
                            Address = "",
                            City = "",
                            ConcurrencyStamp = "8652bf77-14ca-4220-906b-871d4b91c17d",
                            DateOfBirth = new DateTime(2025, 2, 16, 21, 51, 51, 317, DateTimeKind.Local).AddTicks(2695),
                            Email = "normaluser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Normal",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "NORMALUSER@GMAIL.COM",
                            NormalizedUserName = "NORMALUSER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGFwKd7ytIor0323k0F3f3GOT3ylX2P6/93yeJLh8qoIySnkuvTnynwFANKZDAAJIA==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce455470-6b55-4e22-b31a-b62b95dc1635",
                            TwoFactorEnabled = false,
                            UserName = "normaluser@gmail.com"
                        });
                });

            modelBuilder.Entity("eshop_Entity.Contcrete.Basket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Baskets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "c0b7fef7-df2b-4857-9b3d-bc8967ad19ac",
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 411, DateTimeKind.Local).AddTicks(7080),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "14a0183f-1e96-4930-a83d-6ef5f22d8c09",
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 411, DateTimeKind.Local).AddTicks(7102),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        });
                });

            modelBuilder.Entity("eshop_Entity.Contcrete.BasketItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BasketId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("ProductId");

                    b.ToTable("BasketItems");
                });

            modelBuilder.Entity("eshop_Entity.Contcrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(6823),
                            Description = "",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Elektronik",
                            isActive = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(6843),
                            Description = "",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mobil Cihazlar",
                            isActive = true
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(6846),
                            Description = "",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Televizyonlar",
                            isActive = true
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(6848),
                            Description = "",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bilgisayarlar",
                            isActive = true
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(6850),
                            Description = "",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Aksesuarlar",
                            isActive = true
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(6852),
                            Description = "",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Apple",
                            isActive = true
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(6854),
                            Description = "",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Samsung",
                            isActive = true
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(6855),
                            Description = "",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LG",
                            isActive = true
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(6857),
                            Description = "",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Huawei",
                            isActive = true
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(6859),
                            Description = "",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sony",
                            isActive = true
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(6861),
                            Description = "",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lenovo",
                            isActive = true
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(6862),
                            Description = "",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dell",
                            isActive = true
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(6864),
                            Description = "",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Xiaomi",
                            isActive = true
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(6866),
                            Description = "",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Akıllı Saatler",
                            isActive = true
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(6868),
                            Description = "",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tabletler",
                            isActive = true
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(6869),
                            Description = "",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ana Sayfa",
                            isActive = true
                        });
                });

            modelBuilder.Entity("eshop_Entity.Contcrete.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("eshop_Entity.Contcrete.ContactMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ContactMessages");
                });

            modelBuilder.Entity("eshop_Entity.Contcrete.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountPercentage")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Coupon");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "MERHABA20",
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 411, DateTimeKind.Local).AddTicks(7172),
                            DiscountPercentage = 20,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            Id = 2,
                            Code = "INDIRIM10",
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 411, DateTimeKind.Local).AddTicks(7174),
                            DiscountPercentage = 10,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            Id = 3,
                            Code = "HOŞGELDIN15",
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 411, DateTimeKind.Local).AddTicks(7176),
                            DiscountPercentage = 15,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        });
                });

            modelBuilder.Entity("eshop_Entity.Contcrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 130,
                            ApplicationUserId = "14a0183f-1e96-4930-a83d-6ef5f22d8c09",
                            CreatedDate = new DateTime(2024, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderStatus = 0,
                            TotalAmount = 0m,
                            isActive = true
                        });
                });

            modelBuilder.Entity("eshop_Entity.Contcrete.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 230,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7551),
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 130,
                            ProductId = 50,
                            Quantity = 1,
                            UnitPrice = 89.99m,
                            isActive = true
                        });
                });

            modelBuilder.Entity("eshop_Entity.Contcrete.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CVV")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CardDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("cardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cardUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("eshop_Entity.Contcrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7035),
                            ImageUrl = "/images/product-1.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "iPhone 14",
                            Price = 999.99m,
                            Properties = "Apple iPhone 14, 128GB, Siyah, 6.1 inch ekran, A15 Bionic chip ile yüksek performans.",
                            isActive = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7047),
                            ImageUrl = "/images/product-2.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Samsung Galaxy S23",
                            Price = 899.99m,
                            Properties = "Samsung Galaxy S23, 128GB, Beyaz, 6.2 inch ekran, 50MP ana kamera ile mükemmel fotoğraflar.",
                            isActive = true
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7050),
                            ImageUrl = "/images/product-3.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LG OLED TV",
                            Price = 1299.99m,
                            Properties = "LG 55in OLED TV, 4K, Ultra HD, OLED ekran teknolojisi ile mükemmel renk ve kontrast.",
                            isActive = true
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7053),
                            ImageUrl = "/images/product-4.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sony Bravia 65",
                            Price = 1799.99m,
                            Properties = "Sony Bravia 65in 4K TV, Akıllı TV özellikleri, Android işletim sistemi ve Google Assistant desteği.",
                            isActive = true
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7055),
                            ImageUrl = "/images/product-5.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Apple MacBook Pro",
                            Price = 2399.99m,
                            Properties = "Apple MacBook Pro, 16GB RAM, 512GB SSD, M1 Pro chip ile yüksek performanslı ve taşınabilir dizüstü.",
                            isActive = true
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7059),
                            ImageUrl = "/images/product-6.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Samsung Galaxy Tab S8",
                            Price = 649.99m,
                            Properties = "Samsung Galaxy Tab S8, 128GB, 11 inç ekran, S Pen desteği ile verimli kullanım için ideal tablet.",
                            isActive = true
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7062),
                            ImageUrl = "/images/product-7.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dell XPS 13",
                            Price = 1199.99m,
                            Properties = "Dell XPS 13, 16GB RAM, 512GB SSD, İnce tasarımı ve 13 inç 4K ekranıyla taşınabilirlik ve güç bir arada.",
                            isActive = true
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7065),
                            ImageUrl = "/images/product-8.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Huawei MateBook X",
                            Price = 1599.99m,
                            Properties = "Huawei MateBook X, 16GB RAM, 512GB SSD, 13 inç ekran, ince ve hafif yapısıyla mükemmel mobilite.",
                            isActive = true
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7067),
                            ImageUrl = "/images/product-9.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Xiaomi Mi 11",
                            Price = 599.99m,
                            Properties = "Xiaomi Mi 11, 128GB, Siyah, Snapdragon 888 işlemci, 108MP ana kamera ile ultra yüksek çözünürlük.",
                            isActive = true
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7071),
                            ImageUrl = "/images/product-10.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lenovo ThinkPad X1",
                            Price = 1499.99m,
                            Properties = "Lenovo ThinkPad X1, 16GB RAM, 512GB SSD, 14 inç ekran, dayanıklı tasarım ve güçlü performans.",
                            isActive = true
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7074),
                            ImageUrl = "/images/product-11.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Apple AirPods Pro",
                            Price = 249.99m,
                            Properties = "Apple AirPods Pro, aktif gürültü engelleme özelliği, üstün ses kalitesi ve Apple ekosistemiyle uyumlu.",
                            isActive = true
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7077),
                            ImageUrl = "/images/product-12.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Samsung Galaxy Watch 5",
                            Price = 299.99m,
                            Properties = "Samsung Galaxy Watch 5, Akıllı saat, 40mm ekran, spor ve sağlık takibi, 2 gün batarya süresi.",
                            isActive = true
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7079),
                            ImageUrl = "/images/product-13.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LG 27GL850-B Monitor",
                            Price = 349.99m,
                            Properties = "LG 27in QHD IPS Monitör, 144Hz yenileme hızı, NVIDIA G-Sync uyumluluğu ile oyun için ideal.",
                            isActive = true
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7082),
                            ImageUrl = "/images/product-14.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sony WH-1000XM5",
                            Price = 349.99m,
                            Properties = "Sony WH-1000XM5, Kablosuz kulaklık, mükemmel ses yalıtımı, 30 saat pil ömrü ve rahat kullanım.",
                            isActive = true
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7085),
                            ImageUrl = "/images/product-15.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Huawei P50 Pro",
                            Price = 899.99m,
                            Properties = "Huawei P50 Pro, 256GB, 50MP dörtlü kamera, 6.6 inç OLED ekran, mükemmel fotoğraf ve video çekimi.",
                            isActive = true
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7150),
                            ImageUrl = "/images/product-16.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "iPad Pro 12.9",
                            Price = 1099.99m,
                            Properties = "iPad Pro 12.9, 128GB, M1 chip, 12.9 inç Liquid Retina ekran, çizim ve medya düzenleme için ideal.",
                            isActive = true
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7153),
                            ImageUrl = "/images/product-17.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Apple Watch Series 7",
                            Price = 399.99m,
                            Properties = "Apple Watch Series 7, 41mm ekran, giyilebilir sağlık ve fitness takibi, su geçirmez özellik.",
                            isActive = true
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7158),
                            ImageUrl = "/images/product-18.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Samsung QLED 65in TV",
                            Price = 1499.99m,
                            Properties = "Samsung 65in QLED TV, 4K, Quantum Dot teknolojisi ile renkleri daha parlak ve canlı.",
                            isActive = true
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7160),
                            ImageUrl = "/images/product-19.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Xiaomi Mi 10",
                            Price = 699.99m,
                            Properties = "Xiaomi Mi 10, 128GB, Snapdragon 865 işlemci, 108MP ana kamera, 6.67 inç AMOLED ekran.",
                            isActive = true
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7163),
                            ImageUrl = "/images/product-20.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sony Xperia 1 II",
                            Price = 949.99m,
                            Properties = "Sony Xperia 1 II, 128GB, 6.5 inç 4K OLED ekran, sinematik video çekimleri için mükemmel.",
                            isActive = true
                        },
                        new
                        {
                            Id = 21,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7165),
                            ImageUrl = "/images/product-21.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Apple MacBook Air",
                            Price = 1099.99m,
                            Properties = "Apple MacBook Air, M1 chip, 8GB RAM, 256GB SSD, hafif ve ince dizüstü bilgisayar.",
                            isActive = true
                        },
                        new
                        {
                            Id = 22,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7168),
                            ImageUrl = "/images/product-22.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Samsung Galaxy Buds Pro",
                            Price = 199.99m,
                            Properties = "Samsung Galaxy Buds Pro, kablosuz kulaklık, aktif gürültü engelleme, üstün ses kalitesi.",
                            isActive = true
                        },
                        new
                        {
                            Id = 23,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7171),
                            ImageUrl = "/images/product-23.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LG Gram 17",
                            Price = 1699.99m,
                            Properties = "LG Gram 17, 16GB RAM, 512GB SSD, 17 inç ekran, ultra hafif taşınabilir dizüstü bilgisayar.",
                            isActive = true
                        },
                        new
                        {
                            Id = 24,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7173),
                            ImageUrl = "/images/product-24.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sony Alpha 7 III",
                            Price = 2199.99m,
                            Properties = "Sony Alpha 7 III, 24.2MP, 4K video çekimi, profesyonel fotoğraf makineleri.",
                            isActive = true
                        },
                        new
                        {
                            Id = 25,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7176),
                            ImageUrl = "/images/product-25.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Apple iPad Mini",
                            Price = 499.99m,
                            Properties = "Apple iPad Mini, 8.3 inç ekran, A15 Bionic chip, taşınabilir ve güçlü tablet.",
                            isActive = true
                        },
                        new
                        {
                            Id = 26,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7179),
                            ImageUrl = "/images/product-26.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Huawei FreeBuds Pro",
                            Price = 179.99m,
                            Properties = "Huawei FreeBuds Pro, kablosuz kulaklık, aktif gürültü engelleme ve yüksek ses kalitesi.",
                            isActive = true
                        },
                        new
                        {
                            Id = 27,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7181),
                            ImageUrl = "/images/product-27.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Xiaomi Mi Band 6",
                            Price = 44.99m,
                            Properties = "Xiaomi Mi Band 6, Akıllı bileklik, 1.56 inç AMOLED ekran, spor takibi ve fitness özellikleri.",
                            isActive = true
                        },
                        new
                        {
                            Id = 28,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7184),
                            ImageUrl = "/images/product-28.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Samsung 970 EVO Plus SSD",
                            Price = 149.99m,
                            Properties = "Samsung 970 EVO Plus, 1TB SSD, NVMe M.2, ultra hızlı veri transferi.",
                            isActive = true
                        },
                        new
                        {
                            Id = 29,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7186),
                            ImageUrl = "/images/product-29.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lenovo Legion 5",
                            Price = 1399.99m,
                            Properties = "Lenovo Legion 5, 16GB RAM, 512GB SSD, 15.6 inç 144Hz ekran, güçlü oyun laptopu.",
                            isActive = true
                        },
                        new
                        {
                            Id = 30,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7189),
                            ImageUrl = "/images/product-30.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dell Alienware X17",
                            Price = 2499.99m,
                            Properties = "Dell Alienware X17, 32GB RAM, 1TB SSD, 17.3 inç 4K ekran, yüksek performanslı oyun bilgisayarı.",
                            isActive = true
                        },
                        new
                        {
                            Id = 31,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7191),
                            ImageUrl = "/images/product-31.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sony PlayStation 5",
                            Price = 499.99m,
                            Properties = "Sony PlayStation 5, 825GB SSD, 4K oyun desteği, ultra hızlı performans.",
                            isActive = true
                        },
                        new
                        {
                            Id = 32,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7194),
                            ImageUrl = "/images/product-32.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Apple TV 4K",
                            Price = 179.99m,
                            Properties = "Apple TV 4K, 64GB, 4K HDR, Dolby Vision ve Dolby Atmos ile mükemmel görüntü ve ses.",
                            isActive = true
                        },
                        new
                        {
                            Id = 33,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7196),
                            ImageUrl = "/images/product-33.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Samsung Odyssey G7 Monitor",
                            Price = 799.99m,
                            Properties = "Samsung Odyssey G7, 27in QHD, 240Hz, 1ms tepki süresi ile oyun için en iyi ekran.",
                            isActive = true
                        },
                        new
                        {
                            Id = 34,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7200),
                            ImageUrl = "/images/product-34.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Xiaomi Mi Robot Vacuum",
                            Price = 399.99m,
                            Properties = "Xiaomi Mi Robot Vakum, 2.5 saat pil ömrü, akıllı navigasyon, güçlü emiş gücü.",
                            isActive = true
                        },
                        new
                        {
                            Id = 35,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7202),
                            ImageUrl = "/images/product-35.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lenovo Smart Clock",
                            Price = 79.99m,
                            Properties = "Lenovo Smart Clock, Google Assistant ile akıllı saat, uyandırma alarmı ve diğer özellikler.",
                            isActive = true
                        },
                        new
                        {
                            Id = 36,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7205),
                            ImageUrl = "/images/product-36.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Huawei Watch GT 3",
                            Price = 249.99m,
                            Properties = "Huawei Watch GT 3, 46mm ekran, 14 güne kadar pil ömrü, fitness ve sağlık takibi.",
                            isActive = true
                        },
                        new
                        {
                            Id = 37,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7207),
                            ImageUrl = "/images/product-37.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sony Xperia 5 III",
                            Price = 1049.99m,
                            Properties = "Sony Xperia 5 III, 128GB, 6.1 inç OLED ekran, 120Hz yenileme hızı ve mükemmel video çekim özellikleri.",
                            isActive = true
                        },
                        new
                        {
                            Id = 38,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7210),
                            ImageUrl = "/images/product-38.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Apple iMac 24\" M1",
                            Price = 1299.99m,
                            Properties = "Apple iMac 24\" M1, 8GB RAM, 256GB SSD, parlak ve canlı renklerle tasarlanmış masaüstü bilgisayar.",
                            isActive = true
                        },
                        new
                        {
                            Id = 39,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7212),
                            ImageUrl = "/images/product-39.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Samsung Galaxy Note 20 Ultra",
                            Price = 1299.99m,
                            Properties = "Samsung Galaxy Note 20 Ultra, 256GB, 108MP ana kamera, 5G desteği ile hızlı bağlantı.",
                            isActive = true
                        },
                        new
                        {
                            Id = 40,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7215),
                            ImageUrl = "/images/product-40.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Xiaomi Redmi Note 11 Pro",
                            Price = 249.99m,
                            Properties = "Xiaomi Redmi Note 11 Pro, 128GB, 6.67 inç AMOLED ekran, 108MP kamera.",
                            isActive = true
                        },
                        new
                        {
                            Id = 41,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7217),
                            ImageUrl = "/images/product-41.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lenovo Yoga 9i",
                            Price = 1899.99m,
                            Properties = "Lenovo Yoga 9i, 16GB RAM, 512GB SSD, 14 inç 4K ekran, dönüştürülebilir dizüstü bilgisayar.",
                            isActive = true
                        },
                        new
                        {
                            Id = 42,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7220),
                            ImageUrl = "/images/product-42.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Apple Magic Mouse",
                            Price = 79.99m,
                            Properties = "Apple Magic Mouse, kablosuz, çoklu dokunmatik yüzey, zarif ve kompakt tasarım.",
                            isActive = true
                        },
                        new
                        {
                            Id = 43,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7222),
                            ImageUrl = "/images/product-43.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sony WH-XB900N",
                            Price = 249.99m,
                            Properties = "Sony WH-XB900N, Kablosuz kulaklık, ekstra bass özelliği ve gürültü engelleme.",
                            isActive = true
                        },
                        new
                        {
                            Id = 44,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7224),
                            ImageUrl = "/images/product-44.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Apple HomePod Mini",
                            Price = 99.99m,
                            Properties = "Apple HomePod Mini, Akıllı hoparlör, yüksek kaliteli ses ve Apple ekosistemine uyum.",
                            isActive = true
                        },
                        new
                        {
                            Id = 45,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7227),
                            ImageUrl = "/images/product-45.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Samsung T7 Touch SSD",
                            Price = 149.99m,
                            Properties = "Samsung T7 Touch, 1TB SSD, parmak izi güvenliği, ultra hızlı veri transferi.",
                            isActive = true
                        },
                        new
                        {
                            Id = 46,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7229),
                            ImageUrl = "/images/product-46.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Xiaomi Mi 11 Lite",
                            Price = 369.99m,
                            Properties = "Xiaomi Mi 11 Lite, 128GB, Snapdragon 732G, 6.55 inç AMOLED ekran, ince ve şık tasarım.",
                            isActive = true
                        },
                        new
                        {
                            Id = 47,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7232),
                            ImageUrl = "/images/product-47.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lenovo IdeaPad Flex 5",
                            Price = 849.99m,
                            Properties = "Lenovo IdeaPad Flex 5, 8GB RAM, 512GB SSD, 14 inç ekran, dönüştürülebilir laptop.",
                            isActive = true
                        },
                        new
                        {
                            Id = 48,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7287),
                            ImageUrl = "/images/product-48.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sony Bravia A80J",
                            Price = 2199.99m,
                            Properties = "Sony Bravia A80J, 65 inç OLED, 4K, Google TV ile akıllı özellikler ve mükemmel görüntü kalitesi.",
                            isActive = true
                        },
                        new
                        {
                            Id = 49,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7290),
                            ImageUrl = "/images/product-49.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Apple Pencil 2. Nesil",
                            Price = 129.99m,
                            Properties = "Apple Pencil 2. Nesil, iPad Pro ve iPad Air için hassas çizim ve not alma aracı.",
                            isActive = true
                        },
                        new
                        {
                            Id = 50,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7293),
                            ImageUrl = "/images/product-50.jpg",
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Samsung Galaxy Z Fold 4",
                            Price = 1799.99m,
                            Properties = "Samsung Galaxy Z Fold 4, katlanabilir ekran, 12GB RAM, 512GB depolama alanı ile güçlü bir cihaz.",
                            isActive = true
                        });
                });

            modelBuilder.Entity("eshop_Entity.Contcrete.ProductCategories", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 12,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7393),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 12,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7396),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 12,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7398),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 12,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7399),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 12,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7400),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 12,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7401),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 12,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7403),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 12,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7404),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 19,
                            CategoryId = 12,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7405),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 20,
                            CategoryId = 12,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7406),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7407),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7408),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7410),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7411),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7412),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7413),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7414),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7416),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 6,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7417),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7418),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7419),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7420),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 21,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7421),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 22,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7422),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 23,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7424),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 24,
                            CategoryId = 7,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7425),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 25,
                            CategoryId = 4,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7426),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 26,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7427),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 27,
                            CategoryId = 8,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7428),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 28,
                            CategoryId = 9,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7429),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 29,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7430),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 30,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7432),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 31,
                            CategoryId = 10,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7433),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 32,
                            CategoryId = 11,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7434),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 33,
                            CategoryId = 6,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7435),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 34,
                            CategoryId = 12,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7436),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 35,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7437),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 36,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7439),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 37,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7440),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 38,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7441),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 39,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7442),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 40,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7443),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 41,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7444),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 42,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7445),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 43,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7448),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 44,
                            CategoryId = 11,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7449),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 45,
                            CategoryId = 9,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7450),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 46,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7451),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 47,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7452),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 48,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7454),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 49,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7455),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        },
                        new
                        {
                            ProductId = 50,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 2, 16, 21, 51, 51, 236, DateTimeKind.Local).AddTicks(7456),
                            Id = 0,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            isActive = true
                        });
                });

            modelBuilder.Entity("eshop_Entity.Contcrete.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AboutBannerPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutPhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutTextTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Banner1Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Banner2Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Banner3Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactBannerPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterLogoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MapLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SliderText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialMediaUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialMediaUrl2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialMediaUrl3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("eshop_Entity.Contcrete.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("eshop_Entity.Contcrete.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("eshop_Entity.Contcrete.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("eshop_Entity.Contcrete.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eshop_Entity.Contcrete.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("eshop_Entity.Contcrete.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eshop_Entity.Contcrete.Basket", b =>
                {
                    b.HasOne("eshop_Entity.Contcrete.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("eshop_Entity.Contcrete.BasketItem", b =>
                {
                    b.HasOne("eshop_Entity.Contcrete.Basket", "Basket")
                        .WithMany("BasketItems")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eshop_Entity.Contcrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eshop_Entity.Contcrete.Comment", b =>
                {
                    b.HasOne("eshop_Entity.Contcrete.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eshop_Entity.Contcrete.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eshop_Entity.Contcrete.Order", b =>
                {
                    b.HasOne("eshop_Entity.Contcrete.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("eshop_Entity.Contcrete.OrderItem", b =>
                {
                    b.HasOne("eshop_Entity.Contcrete.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eshop_Entity.Contcrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eshop_Entity.Contcrete.ProductCategories", b =>
                {
                    b.HasOne("eshop_Entity.Contcrete.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eshop_Entity.Contcrete.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("eshop_Entity.Contcrete.Basket", b =>
                {
                    b.Navigation("BasketItems");
                });

            modelBuilder.Entity("eshop_Entity.Contcrete.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("eshop_Entity.Contcrete.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("eshop_Entity.Contcrete.Product", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ProductCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
